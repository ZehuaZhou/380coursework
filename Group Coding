{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from random import sample\n",
    "import sys \n",
    "\n",
    "class Vertex:\n",
    "    def __init__(self):\n",
    "        self.nextVertex = []\n",
    "        self.visit = False\n",
    "\n",
    "    def addNext(self,vertex):\n",
    "        self.nextVertex.append(vertex)\n",
    "\n",
    "    def getNext(self):\n",
    "        return self.nextVertex;\n",
    "\n",
    "    def visited(self,visit):\n",
    "        self.visit = visit\n",
    "\n",
    "    def getVisited(self):\n",
    "        return self.visit\n",
    "\n",
    "class Graph:\n",
    "    def __init__(self, numVertex, random = True, numEdge = 0, Edges = []):\n",
    "        self.numVertex = numVertex\n",
    "        self.vertices = dict()\n",
    "        self.cycle = []\n",
    "        self.step = 0\n",
    "        for i in range(0,self.numVertex):\n",
    "            self.vertices[i] = Vertex()\n",
    "#         print(self.vertices.keys())\n",
    "        if random is False and (lenth(Edges) != 0):\n",
    "            for item in Edges:\n",
    "                self.addEdge(item[0],item[1])\n",
    "\n",
    "        if random and (numEdge != 0):\n",
    "            possible_coordinates = [(x, y) for x in range(numVertex) for y in range(numVertex) if x!= y]\n",
    "            self.edges = sample(possible_coordinates, numEdge)\n",
    "#             print(self.edges)\n",
    "            for i in self.edges:\n",
    "                self.addEdge(i[0],i[1])\n",
    "\n",
    "    def addVertex(self, num = 1):\n",
    "        for i in range(self.numVertex, self.numVertex + num):\n",
    "            self.vertices[i] = Vertex()\n",
    "        self.numVertex += num\n",
    "\n",
    "    def addEdge(self, a, b):\n",
    "        if a not in self.vertices.keys():\n",
    "            self.addVertex(a)\n",
    "        if b not in self.vertices.keys():\n",
    "            self.addVertex(b)\n",
    "        self.vertices[a].addNext(b)\n",
    "\n",
    "    def allVisited(self):\n",
    "        for item in self.vertices:\n",
    "            if self.vertices[item].getVisited() is False:\n",
    "                return False\n",
    "        return True\n",
    "    \n",
    "    def Exit(self):\n",
    "        print('finished')\n",
    "    \n",
    "    def Exhaustive(self,vertex):\n",
    "        ver = vertex\n",
    "        self.step += 1\n",
    "        self.cycle.append(ver)\n",
    "        self.vertices[ver].visited(True)\n",
    "        if self.allVisited() is True:\n",
    "            print('Cycle found, vertices order is:')\n",
    "            print(self.cycle)\n",
    "            print('Total step took: %d' %self.step)\n",
    "            print(time.gmtime())\n",
    "            sys.exit()\n",
    "\n",
    "        if len(self.vertices[ver].getNext()) == 0:\n",
    "            self.vertices[ver].visited(False)\n",
    "            self.cycle.pop()\n",
    "            return\n",
    "\n",
    "        recur = self.vertices[ver].getNext()\t\n",
    "        for item in recur:\n",
    "            if self.vertices[item].getVisited() == False:\n",
    "                self.Exhaustive(item)\n",
    "\n",
    "        self.vertices[ver].visited(False)\n",
    "        self.cycle.pop()\n",
    "        if len(self.cycle) == 0:\n",
    "            print('Total step took: %d' %self.step)\n",
    "            print('Can not find a cycle')\n",
    "            print(time.gmtime())\n",
    "        return\n",
    "\n",
    "    def Greedy(self,vertex):\n",
    "        print(vertex)\n",
    "        self.step += 1\n",
    "        self.recur = dict()\n",
    "        ver = vertex\n",
    "        self.cycle.append(ver)\n",
    "        self.vertices[ver].visited(True)\n",
    "        if self.allVisited() is True:\n",
    "            print('Cycle found, vertices order is:')\n",
    "            print(self.cycle)\n",
    "            print('Total step took: %d' %self.step)\n",
    "            print(time.gmtime())\n",
    "            sys.exit()\n",
    "\n",
    "        if len(self.vertices[ver].getNext()) == 0:\n",
    "            self.vertices[ver].visited(False)\n",
    "            self.cycle.pop()\n",
    "            return\n",
    "        \n",
    "        if ver not in self.recur:\n",
    "            self.recur[ver] = self.vertices[ver].getNext()\n",
    "        candidate = -1\n",
    "        most = -1\n",
    "        for item in self.recur[ver]:\n",
    "            if self.vertices[item].getVisited() == False:\n",
    "                if len(self.vertices[item].getNext()) > most:\n",
    "                    candidate = item\n",
    "                    most = len(self.vertices[item].getNext())\n",
    "        if candidate == -1:\n",
    "            self.cycle.pop()\n",
    "            return\n",
    "        self.recur[ver].remove(candidate)\n",
    "        self.Greedy(candidate)\n",
    "\n",
    "        self.vertices[ver].visited(False)\n",
    "        self.cycle.pop()\n",
    "        if len(self.cycle) == 0:\n",
    "            print('Total step took: %d' %self.step)\n",
    "            print('Can not find a cycle')\n",
    "            print(time.gmtime())\n",
    "        return\n",
    "\n",
    "    def special(self):\n",
    "        n = len(self.vertices)\n",
    "        \n",
    "        # degree of each vertex is at least n/2\n",
    "        for ver in self.vertices:\n",
    "            if len(self.vertices[ver].getNext()) < (n/2):\n",
    "                print('Potentially no cycle')\n",
    "        print('There is hamilton cycle. Because degree of each vertex is at least n/2')\n",
    "            \n",
    "        \n",
    "        # degu+degv >= n\n",
    "        for ver1 in self.vertices:\n",
    "            for ver2 in self.vertices:\n",
    "                if ver1 == ver2:\n",
    "                    continue\n",
    "                if len(self.vertices[ver1].getNext()) + len(self.vertices[ver2].getNext()) < n:\n",
    "                    print('Potentially no cycle')\n",
    "        print('There is hamilton cycle. Because sum of the degree of each two vertex is greater or equal to n')\n",
    "\n",
    "        # m > 0.5*(n^2 -3*n +6)\n",
    "        sume = 0\n",
    "        for ver in self.vertices:\n",
    "            sume += len(self.vertices[ver].getNext())\n",
    "        check = 0.5*(n**2 -3*n +6)\n",
    "        if sume > check:\n",
    "            print('There is hamilton cycle. Because num of total edges is greater or equal to (n^2 -3*n +6)')\n",
    "\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "time.struct_time(tm_year=2018, tm_mon=4, tm_mday=25, tm_hour=18, tm_min=6, tm_sec=52, tm_wday=2, tm_yday=115, tm_isdst=0)\n",
      "2\n",
      "204\n",
      "373\n",
      "263\n",
      "225\n",
      "238\n",
      "66\n",
      "72\n",
      "80\n",
      "451\n",
      "148\n",
      "154\n",
      "346\n",
      "360\n",
      "201\n",
      "192\n",
      "423\n",
      "111\n",
      "235\n",
      "429\n",
      "335\n",
      "492\n",
      "403\n",
      "15\n",
      "120\n",
      "366\n",
      "454\n",
      "239\n",
      "61\n",
      "10\n",
      "395\n",
      "257\n",
      "329\n",
      "268\n",
      "380\n",
      "46\n",
      "424\n",
      "407\n",
      "34\n",
      "75\n",
      "436\n",
      "254\n",
      "475\n",
      "486\n",
      "377\n",
      "186\n",
      "457\n",
      "438\n",
      "490\n",
      "77\n",
      "491\n",
      "28\n",
      "291\n",
      "266\n",
      "284\n",
      "184\n",
      "241\n",
      "493\n",
      "426\n",
      "213\n",
      "57\n",
      "18\n",
      "421\n",
      "298\n",
      "358\n",
      "190\n",
      "370\n",
      "271\n",
      "194\n",
      "331\n",
      "434\n",
      "282\n",
      "199\n",
      "233\n",
      "285\n",
      "345\n",
      "427\n",
      "442\n",
      "349\n",
      "58\n",
      "385\n",
      "172\n",
      "307\n",
      "314\n",
      "343\n",
      "173\n",
      "445\n",
      "232\n",
      "272\n",
      "365\n",
      "408\n",
      "453\n",
      "214\n",
      "114\n",
      "439\n",
      "354\n",
      "103\n",
      "96\n",
      "487\n",
      "437\n",
      "328\n",
      "124\n",
      "74\n",
      "237\n",
      "217\n",
      "464\n",
      "256\n",
      "294\n",
      "306\n",
      "283\n",
      "7\n",
      "79\n",
      "123\n",
      "212\n",
      "231\n",
      "270\n",
      "62\n",
      "99\n",
      "136\n",
      "3\n",
      "396\n",
      "70\n",
      "267\n",
      "381\n",
      "297\n",
      "393\n",
      "415\n",
      "94\n",
      "223\n",
      "113\n",
      "301\n",
      "347\n",
      "165\n",
      "400\n",
      "40\n",
      "205\n",
      "292\n",
      "193\n",
      "466\n",
      "189\n",
      "353\n",
      "300\n",
      "447\n",
      "310\n",
      "416\n",
      "369\n",
      "384\n",
      "207\n",
      "313\n",
      "368\n",
      "452\n",
      "12\n",
      "387\n",
      "169\n",
      "36\n",
      "54\n",
      "316\n",
      "176\n",
      "167\n",
      "1\n",
      "246\n",
      "147\n",
      "95\n",
      "362\n",
      "100\n",
      "428\n",
      "8\n",
      "420\n",
      "303\n",
      "108\n",
      "259\n",
      "481\n",
      "117\n",
      "356\n",
      "471\n",
      "476\n",
      "177\n",
      "418\n",
      "106\n",
      "252\n",
      "348\n",
      "224\n",
      "159\n",
      "327\n",
      "202\n",
      "71\n",
      "206\n",
      "56\n",
      "200\n",
      "334\n",
      "133\n",
      "226\n",
      "432\n",
      "262\n",
      "185\n",
      "236\n",
      "158\n",
      "273\n",
      "363\n",
      "187\n",
      "386\n",
      "249\n",
      "178\n",
      "265\n",
      "44\n",
      "351\n",
      "286\n",
      "315\n",
      "5\n",
      "431\n",
      "255\n",
      "68\n",
      "404\n",
      "216\n",
      "161\n",
      "470\n",
      "134\n",
      "116\n",
      "456\n",
      "16\n",
      "198\n",
      "473\n",
      "140\n",
      "391\n",
      "229\n",
      "168\n",
      "359\n",
      "121\n",
      "321\n",
      "357\n",
      "38\n",
      "26\n",
      "42\n",
      "325\n",
      "288\n",
      "364\n",
      "131\n",
      "304\n",
      "401\n",
      "85\n",
      "350\n",
      "455\n",
      "339\n",
      "253\n",
      "341\n",
      "73\n",
      "101\n",
      "435\n",
      "55\n",
      "150\n",
      "88\n",
      "60\n",
      "142\n",
      "392\n",
      "115\n",
      "278\n",
      "433\n",
      "151\n",
      "260\n",
      "293\n",
      "443\n",
      "287\n",
      "21\n",
      "372\n",
      "323\n",
      "76\n",
      "29\n",
      "462\n",
      "152\n",
      "275\n",
      "352\n",
      "382\n",
      "474\n",
      "361\n",
      "132\n",
      "295\n",
      "245\n",
      "20\n",
      "397\n",
      "24\n",
      "195\n",
      "92\n",
      "274\n",
      "37\n",
      "488\n",
      "91\n",
      "480\n",
      "47\n",
      "128\n",
      "308\n",
      "398\n",
      "139\n",
      "402\n",
      "248\n",
      "93\n",
      "330\n",
      "472\n",
      "296\n",
      "261\n",
      "59\n",
      "460\n",
      "51\n",
      "425\n",
      "105\n",
      "122\n",
      "119\n",
      "483\n",
      "196\n",
      "378\n",
      "87\n",
      "155\n",
      "277\n",
      "497\n",
      "162\n",
      "450\n",
      "145\n",
      "444\n",
      "197\n",
      "279\n",
      "482\n",
      "414\n",
      "458\n",
      "281\n",
      "102\n",
      "409\n",
      "146\n",
      "269\n",
      "333\n",
      "244\n",
      "479\n",
      "485\n",
      "104\n",
      "220\n",
      "247\n",
      "50\n",
      "459\n",
      "86\n",
      "112\n",
      "48\n",
      "22\n",
      "191\n",
      "243\n",
      "31\n",
      "164\n",
      "32\n",
      "326\n",
      "371\n",
      "81\n",
      "340\n",
      "170\n",
      "183\n",
      "188\n",
      "305\n",
      "394\n",
      "63\n",
      "215\n",
      "383\n",
      "137\n",
      "440\n",
      "0\n",
      "149\n",
      "302\n",
      "210\n",
      "374\n",
      "467\n",
      "41\n",
      "446\n",
      "97\n",
      "258\n",
      "153\n",
      "222\n",
      "342\n",
      "478\n",
      "90\n",
      "143\n",
      "399\n",
      "463\n",
      "35\n",
      "242\n",
      "411\n",
      "230\n",
      "468\n",
      "43\n",
      "312\n",
      "469\n",
      "367\n",
      "413\n",
      "227\n",
      "276\n",
      "390\n",
      "110\n",
      "290\n",
      "319\n",
      "218\n",
      "83\n",
      "219\n",
      "23\n",
      "156\n",
      "14\n",
      "89\n",
      "379\n",
      "317\n",
      "203\n",
      "311\n",
      "430\n",
      "324\n",
      "389\n",
      "477\n",
      "182\n",
      "449\n",
      "9\n",
      "410\n",
      "221\n",
      "412\n",
      "484\n",
      "27\n",
      "376\n",
      "163\n",
      "30\n",
      "160\n",
      "64\n",
      "419\n",
      "264\n",
      "126\n",
      "309\n",
      "17\n",
      "19\n",
      "496\n",
      "338\n",
      "336\n",
      "157\n",
      "180\n",
      "405\n",
      "289\n",
      "181\n",
      "344\n",
      "250\n",
      "240\n",
      "144\n",
      "417\n",
      "53\n",
      "171\n",
      "11\n",
      "228\n",
      "4\n",
      "494\n",
      "422\n",
      "251\n",
      "175\n",
      "495\n",
      "322\n",
      "78\n",
      "84\n",
      "141\n",
      "318\n",
      "166\n",
      "125\n",
      "127\n",
      "98\n",
      "337\n",
      "280\n",
      "355\n",
      "33\n",
      "65\n",
      "234\n",
      "208\n",
      "174\n",
      "138\n",
      "375\n",
      "69\n",
      "52\n",
      "49\n",
      "82\n",
      "130\n",
      "6\n",
      "109\n",
      "135\n",
      "179\n",
      "67\n",
      "118\n",
      "25\n",
      "45\n",
      "332\n",
      "13\n",
      "129\n",
      "209\n",
      "448\n",
      "489\n",
      "441\n",
      "461\n",
      "498\n",
      "499\n",
      "299\n",
      "465\n",
      "388\n",
      "39\n",
      "107\n",
      "320\n",
      "406\n",
      "211\n",
      "Cycle found, vertices order is:\n",
      "[2, 204, 373, 263, 225, 238, 66, 72, 80, 451, 148, 154, 346, 360, 201, 192, 423, 111, 235, 429, 335, 492, 403, 15, 120, 366, 454, 239, 61, 10, 395, 257, 329, 268, 380, 46, 424, 407, 34, 75, 436, 254, 475, 486, 377, 186, 457, 438, 490, 77, 491, 28, 291, 266, 284, 184, 241, 493, 426, 213, 57, 18, 421, 298, 358, 190, 370, 271, 194, 331, 434, 282, 199, 233, 285, 345, 427, 442, 349, 58, 385, 172, 307, 314, 343, 173, 445, 232, 272, 365, 408, 453, 214, 114, 439, 354, 103, 96, 487, 437, 328, 124, 74, 237, 217, 464, 256, 294, 306, 283, 7, 79, 123, 212, 231, 270, 62, 99, 136, 3, 396, 70, 267, 381, 297, 393, 415, 94, 223, 113, 301, 347, 165, 400, 40, 205, 292, 193, 466, 189, 353, 300, 447, 310, 416, 369, 384, 207, 313, 368, 452, 12, 387, 169, 36, 54, 316, 176, 167, 1, 246, 147, 95, 362, 100, 428, 8, 420, 303, 108, 259, 481, 117, 356, 471, 476, 177, 418, 106, 252, 348, 224, 159, 327, 202, 71, 206, 56, 200, 334, 133, 226, 432, 262, 185, 236, 158, 273, 363, 187, 386, 249, 178, 265, 44, 351, 286, 315, 5, 431, 255, 68, 404, 216, 161, 470, 134, 116, 456, 16, 198, 473, 140, 391, 229, 168, 359, 121, 321, 357, 38, 26, 42, 325, 288, 364, 131, 304, 401, 85, 350, 455, 339, 253, 341, 73, 101, 435, 55, 150, 88, 60, 142, 392, 115, 278, 433, 151, 260, 293, 443, 287, 21, 372, 323, 76, 29, 462, 152, 275, 352, 382, 474, 361, 132, 295, 245, 20, 397, 24, 195, 92, 274, 37, 488, 91, 480, 47, 128, 308, 398, 139, 402, 248, 93, 330, 472, 296, 261, 59, 460, 51, 425, 105, 122, 119, 483, 196, 378, 87, 155, 277, 497, 162, 450, 145, 444, 197, 279, 482, 414, 458, 281, 102, 409, 146, 269, 333, 244, 479, 485, 104, 220, 247, 50, 459, 86, 112, 48, 22, 191, 243, 31, 164, 32, 326, 371, 81, 340, 170, 183, 188, 305, 394, 63, 215, 383, 137, 440, 0, 149, 302, 210, 374, 467, 41, 446, 97, 258, 153, 222, 342, 478, 90, 143, 399, 463, 35, 242, 411, 230, 468, 43, 312, 469, 367, 413, 227, 276, 390, 110, 290, 319, 218, 83, 219, 23, 156, 14, 89, 379, 317, 203, 311, 430, 324, 389, 477, 182, 449, 9, 410, 221, 412, 484, 27, 376, 163, 30, 160, 64, 419, 264, 126, 309, 17, 19, 496, 338, 336, 157, 180, 405, 289, 181, 344, 250, 240, 144, 417, 53, 171, 11, 228, 4, 494, 422, 251, 175, 495, 322, 78, 84, 141, 318, 166, 125, 127, 98, 337, 280, 355, 33, 65, 234, 208, 174, 138, 375, 69, 52, 49, 82, 130, 6, 109, 135, 179, 67, 118, 25, 45, 332, 13, 129, 209, 448, 489, 441, 461, 498, 499, 299, 465, 388, 39, 107, 320, 406, 211]\n",
      "Total step took: 500\n",
      "time.struct_time(tm_year=2018, tm_mon=4, tm_mday=25, tm_hour=18, tm_min=6, tm_sec=52, tm_wday=2, tm_yday=115, tm_isdst=0)\n"
     ]
    },
    {
     "ename": "SystemExit",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "An exception has occurred, use %tb to see the full traceback.\n",
      "\u001b[0;31mSystemExit\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "g = Graph(500,numEdge = 248000)\n",
    "print(time.gmtime())\n",
    "g.Greedy(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "time.struct_time(tm_year=2018, tm_mon=4, tm_mday=25, tm_hour=18, tm_min=18, tm_sec=51, tm_wday=2, tm_yday=115, tm_isdst=0)\n",
      "Cycle found, vertices order is:\n",
      "[2, 17, 13, 1, 7, 4, 14, 11, 3, 8, 5, 19, 6, 15, 18, 12, 10, 0, 9, 16]\n",
      "Total step took: 6857604\n",
      "time.struct_time(tm_year=2018, tm_mon=4, tm_mday=25, tm_hour=18, tm_min=19, tm_sec=23, tm_wday=2, tm_yday=115, tm_isdst=0)\n"
     ]
    },
    {
     "ename": "SystemExit",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "An exception has occurred, use %tb to see the full traceback.\n",
      "\u001b[0;31mSystemExit\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "g = Graph(20,numEdge = 120)\n",
    "print(time.gmtime())\n",
    "g.Exhaustive(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "time.struct_time(tm_year=2018, tm_mon=4, tm_mday=25, tm_hour=18, tm_min=23, tm_sec=49, tm_wday=2, tm_yday=115, tm_isdst=0)\n",
      "6\n",
      "time.struct_time(tm_year=2018, tm_mon=4, tm_mday=25, tm_hour=18, tm_min=26, tm_sec=14, tm_wday=2, tm_yday=115, tm_isdst=0)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x108e17a90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Route: [  0   7 180 176 105 124 139  73 137  75  39  23  79 192  99 156 112 190\n",
      " 106 179 171  19 127  34  65  89  53 119 147 126  26 160 185 173 136  25\n",
      "  48 167  18  21 140  60 177  14 157  63  45  57 152  92 163   2 162 117\n",
      "   9   1 197  38  95  13  47 129 133  81 102 100   8  15 135 184 148  41\n",
      " 164  78 149  67 198  33  68  54 104  52  77  36  85 194 154 128  31  27\n",
      "  55  46 189  71  56  37 182 115  76  32  84 168   6 187  28 172  70 134\n",
      "  49 118  86  20 132  82  12 141  17  29 188  80 109  16 143 169 195  88\n",
      "  93 146 120 123 174  90  61  30  94  72  74  98  91 138 111  44 186 113\n",
      "  69  43 114 161  35 150 191 130 151 144  62 193 166 122 155  59 153 175\n",
      "  87  97  64 183 101  40 181  96 158 131 178  10 107  58  51  50  22  83\n",
      " 108 125   4  11  42   5 121  66 142 165 116 110 103 145 170  24 196   3\n",
      " 159 199]\n",
      "\n",
      "Distance: 11.748185381967376\n"
     ]
    }
   ],
   "source": [
    "# Exclusive for Meta_case,\n",
    "# Weighted directed graph, weight is the euclidean distance between to points\n",
    "# Based on Pairwise exchange for TSP\n",
    "# Consider all points are linking to each other\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "# Calculate the distance in of the route r traversing all points, ending at the path start.\n",
    "def path_distance(route, vertices):\n",
    "    sumr = 0\n",
    "    for p in range(len(route)):\n",
    "        sumr += np.linalg.norm(vertices[route[p]]-vertices[route[p-1]])\n",
    "    return sumr\n",
    "\n",
    "# Reverse the order of elements from element i to element k in array r.\n",
    "def swap(route,first,last): \n",
    "    reversed_arr = route[first:last]\n",
    "    reversed_arr = reversed_arr[::-1]\n",
    "    return np.concatenate((route[0:first], reversed_arr, route[last:]))\n",
    "\n",
    "def two_opt(points,improvement_threshold): # 2-opt Algorithm adapted from https://en.wikipedia.org/wiki/2-opt\n",
    "    route = np.arange(points.shape[0])\n",
    "    improvement_factor = 1\n",
    "    \n",
    "    # Initial the distance based on the initial order\n",
    "    best_distance = path_distance(route,points)\n",
    "    step = 0\n",
    "    #start improve\n",
    "    while improvement_factor > improvement_threshold:\n",
    "        step += 1\n",
    "        distance_to_beat = best_distance\n",
    "        \n",
    "        for swap_first in range(1,len(route)-2): \n",
    "            for swap_last in range(swap_first+1,len(route)): \n",
    "                new_route = swap(route,swap_first,swap_last) \n",
    "                new_distance = path_distance(new_route,points) \n",
    "                \n",
    "                if new_distance < best_distance: \n",
    "                    route = new_route \n",
    "                    best_distance = new_distance\n",
    "                    \n",
    "        improvement_factor = 1 - best_distance/distance_to_beat\n",
    "    return route,step\n",
    "\n",
    "print(time.gmtime())\n",
    "points = np.random.RandomState(1000).rand(200,2)\n",
    "\n",
    "route,step = two_opt(points,0.001)\n",
    "\n",
    "print(step)\n",
    "print(time.gmtime())\n",
    "\n",
    "# For plotting\n",
    "new_points_order = np.concatenate((np.array([points[route[i]] for i in range(len(route))]),np.array([points[0]])))\n",
    "\n",
    "plt.scatter(points[:,0],points[:,1])\n",
    "\n",
    "plt.plot(new_points_order[:,0],new_points_order[:,1])\n",
    "plt.show()\n",
    "print(\"Route: \" + str(route) + \"\\n\\nDistance: \" + str(path_distance(route,points)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
